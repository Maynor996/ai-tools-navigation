name: 自动更新站点信息

on:
  schedule:
    # 每天北京时间上午9点运行 (UTC 1:00)
    - cron: '0 1 * * *'
  workflow_dispatch: # 允许手动触发
  push:
    branches: [ main, master ]

jobs:
  update-site:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 安装依赖
      run: |
        npm install axios cheerio
        
    - name: 更新站点数据
      run: |
        echo "🚀 开始检测AI工具平台状态..."
        node scripts/update-tools.js
        
    - name: 验证更新结果
      run: |
        echo "📊 检查更新结果..."
        if [ -f "_data/site_data.json" ]; then
          echo "✅ 数据文件生成成功"
          ls -la _data/
        else
          echo "❌ 数据文件生成失败"
        fi
        
        if [ -f "index.md" ]; then
          echo "✅ 主页文件存在"
          echo "📄 文件大小: $(wc -c < index.md) bytes"
        else
          echo "❌ 主页文件缺失"
          exit 1
        fi
        
    - name: 提交更改
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add .
        
        # 检查是否有更改需要提交
        if git diff --staged --quiet; then
          echo "📝 没有检测到内容更改，跳过提交"
        else
          echo "📝 检测到内容更新，准备提交..."
          
          # 生成提交信息
          CURRENT_TIME=$(date +'%Y-%m-%d %H:%M:%S')
          AVAILABLE_COUNT=$(node -e "
            try {
              const data = require('.//_data/site_data.json');
              console.log(data.update_info.available_tools || 0);
            } catch(e) {
              console.log('0');
            }
          ")
          TOTAL_COUNT=$(node -e "
            try {
              const data = require('.//_data/site_data.json');
              console.log(data.update_info.tools_checked || 0);
            } catch(e) {
              console.log('0');
            }
          ")
          
          git commit -m "🤖 自动更新站点信息

📅 更新时间: ${CURRENT_TIME}
🔍 检查平台: ${TOTAL_COUNT} 个
✅ 可用平台: ${AVAILABLE_COUNT} 个
🤖 By GitHub Actions"
          
          git push
          echo "✅ 更新已提交并推送"
        fi

  deploy:
    needs: update-site
    runs-on: ubuntu-latest
    if: success()
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: 检出更新后的代码
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        
    - name: 设置 Ruby 环境
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: 创建 Gemfile.lock（如果不存在）
      run: |
        if [ ! -f "Gemfile.lock" ]; then
          echo "创建 Gemfile.lock..."
          bundle install
        fi
        
    - name: 安装 Jekyll 依赖
      run: |
        echo "📦 安装 Jekyll 和相关依赖..."
        gem install jekyll bundler
        bundle install
        
    - name: 验证 Jekyll 配置
      run: |
        echo "🔍 验证 Jekyll 配置..."
        if [ -f "_config.yml" ]; then
          echo "✅ Jekyll 配置文件存在"
          cat _config.yml | head -10
        else
          echo "❌ 缺少 Jekyll 配置文件"
          exit 1
        fi
        
    - name: 构建 Jekyll 站点
      run: |
        echo "🏗️ 构建 Jekyll 站点..."
        bundle exec jekyll build --destination ./_site --verbose
        
        echo "📊 构建结果:"
        ls -la _site/
        echo "📄 生成的文件数量: $(find _site -type f | wc -l)"
        
    - name: 上传页面资源
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./_site
        
    - name: 部署到 GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
      
    - name: 部署完成通知
      run: |
        echo "🎉 部署完成！"
        echo "🌐 网站地址: ${{ steps.deployment.outputs.page_url }}"
        echo "⏰ 部署时间: $(date +'%Y-%m-%d %H:%M:%S')" 